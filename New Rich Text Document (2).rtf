{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green176\blue80;\red247\green150\blue70;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs40\lang9 Fundamental JavaScript Problems\par
Variables and Data Types\par
\cf1\fs28 1.Declare a variable and assign a number to it.\par
2.Declare a variable and assign a string to it.\par
3.Declare a variable and assign a boolean to it.\par
4.Convert a string to a number.\par
5.Convert a number to a string.\par
6.Check the type of a variable.\par
7.Perform arithmetic operations (addition, subtraction, multiplication, division).\par
8.Concatenate two strings.\par
9.Use template literals to embed variables in a string.\cf0\par
\cf1 10.Check if a variable is null or undefined.\par
\cf0\fs40 Control Structures\fs28\par
\cf1 1.Write an if statement to check if a number is positive.\par
2.Write an if-else statement to check if a number is even or odd.\par
3.Write an if-else if-else statement to categorize age groups.\par
4.Write a switch statement to handle different cases for days of the week.\cf0\par
\cf1 5.Write a for loop to print numbers from 1 to 10.\cf0\par
\cf1 6.Write a while loop to print numbers from 1 to 10.\cf0\par
\cf1 7.Write a do...while loop to print numbers from 1 to 10.\par
\cf2 8.object orainted programing.\cf0\par
8.Use a for...in loop to iterate over the properties of an object.\par
9.Use a for...of loop to iterate over the elements of an array.\par
10.Write a nested loop to create a multiplication table.\par
\fs40 Functions\par
\fs28 1.Declare a function that adds two numbers.\par
2.Declare a function that returns the factorial of a number.\par
3.Declare a function that checks if a number is prime.\par
4.Declare a function that returns the nth Fibonacci number.\par
5.Write a function that converts Celsius to Fahrenheit.\par
6.Write a function that converts Fahrenheit to Celsius.\par
7.Write a recursive function to find the greatest common divisor (GCD) of two numbers.\par
8.Write a function that checks if a string is a palindrome.\par
9.Write a function that returns the length of the longest word in a string.\par
10.Write a function that capitalizes the first letter of each word in a string.\par
\fs40 Arrays\par
\fs28 1.Declare an array and add elements to it.\par
2.Remove the last element from an array.\par
3.Remove the first element from an array.\par
4.Find the index of a specific element in an array.\par
5.Use slice to get a portion of an array.\par
6.Use splice to remove elements from an array.\par
7.Use forEach to iterate over an array and print each element.\par
8.Use map to create a new array with the squares of each element.\par
9.Use filter to create a new array with only even numbers.\par
10.Use reduce to find the sum of all elements in an array.\par
\fs40 Objects\par
\fs28 1.Create an object with properties for a person's name, age, and job.\par
2.Access and print the properties of an object.\par
3.Add a new property to an object.\par
4.Remove a property from an object.\par
5.Write a method within an object that prints a greeting message.\par
6.Use this keyword within an object method.\par
7.Create an object constructor for a Car with properties for make, model, and year.\par
8.Create instances of the Car object.\par
9.Use Object.keys to get an array of property names from an object.\par
10.Use Object.values to get an array of property values from an object.\par
\fs40 Intermediate JavaScript Problems\par
ES6 Features\par
\fs28 1.Declare variables using let and const.\par
2.Use destructuring assignment to extract values from an array.\par
3.Use destructuring assignment to extract properties from an object.\par
4.Use the spread operator to copy an array.\par
5.Use the spread operator to merge two arrays.\par
6.Use the rest operator to collect arguments into an array.\par
7.Use arrow functions to simplify function syntax.\par
8.Use template literals to create a multi-line string.\par
9.Create a class Person with a constructor and a method.\par
10.Extend the Person class to create a Student class.\par
\fs40 DOM Manipulation\par
\fs28 1.Select an element by its ID.\par
2.Select elements by their class name.\par
3.Select elements by their tag name.\par
4.Change the text content of an element.\par
5.Change the HTML content of an element.\par
6.Add a new element to the DOM.\par
7.Remove an element from the DOM.\par
8.Add an event listener to a button.\par
9.Handle a click event.\par
10.Prevent the default action of a form submission.\par
\fs40 Asynchronous JavaScript\par
\fs28 1.Write a function that uses a callback.\par
2.Write a function that returns a promise.\par
3.Handle a resolved promise.\par
4.Handle a rejected promise.\par
5.Use async and await to fetch data from an API.\par
6.Handle errors in an async function.\par
7.Chain multiple promises.\par
8.Use Promise.all to handle multiple promises.\par
9.Use setTimeout to delay a function call.\par
10.Use setInterval to call a function repeatedly.\par
\fs40 Error Handling\par
\fs28 1.Use try and catch to handle errors.\par
2.Use finally to execute code after try/catch.\par
3.Throw a custom error.\par
4.Catch and log an error message.\par
5.Use Error object properties like message and name.\par
6.Create a function that validates user input and throws errors for invalid cases.\par
7.Handle multiple types of errors.\par
8.Use try/catch in an async function.\par
9.Write custom error classes by extending the Error class.\par
10.Create a utility function to log errors to an external service.\par
\fs40 Modules\par
\fs28 1.Create a module with named exports.\par
2.Create a module with a default export.\par
3.Import a named export from a module.\par
4.Import a default export from a module.\par
5.Re-export a module.\par
6.Use dynamic imports.\par
7.Structure a project using ES6 modules.\par
8.Create a utility module with common functions.\par
9.Import multiple named exports from a module.\par
10.Use a module to manage application state.\par
\fs40 Advanced JavaScript Problems\fs28\par
\fs40 Advanced Functions\par
\fs28 1.Write a closure to create private variables.\par
2.Create a higher-order function that takes a function as an argument.\par
3.Write a function that returns another function.\par
4.Implement function currying.\par
5.Write a memoized function.\par
6.Create a debounce function.\par
7.Create a throttle function.\par
8.Use function composition.\par
9.Implement partial application.\par
10.Write a polyfill for bind.\fs40\par
Prototypes and Inheritance\par
\fs28 1.Create an object using a constructor function.\par
2.Add methods to a constructor function's prototype.\par
3.Create an object using Object.create.\par
4.Implement inheritance using prototypes.\par
5.Override a method in a child object.\par
6.Use call and apply to invoke functions with different contexts.\par
7.Understand and use the prototype chain.\par
8.Create a mixin to add shared behavior to objects.\par
9.Implement a simple version of new operator.\par
10.Write a polyfill for Object.create.\fs40\par
Advanced Array and Object Methods\par
\fs28 1.Use Array.prototype.flat to flatten an array.\par
2.Use Array.prototype.flatMap to map and flatten an array.\par
3.Use Array.prototype.find to find an element in an array.\par
4.Use Array.prototype.findIndex to find the index of an element in an array.\par
5.Use Array.prototype.every to check if all elements in an array pass a test.\par
6.Use Array.prototype.some to check if any elements in an array pass a test.\par
7.Use Array.prototype.sort to sort an array.\par
8.Use Array.prototype.reverse to reverse an array.\par
9.Use Object.keys to get an array of object keys.\par
10.Use Object.values to get an array of object values.\par
\fs40 Regular Expressions\par
\fs28 1.Write a regex to match a valid email address.\par
2.Write a regex to match a valid URL.\par
3.Write a regex to match a phone number.\par
4.Use capturing groups in a regex.\par
5.Use regex flags for global and case-insensitive matching.\par
6.Replace all occurrences of a substring using regex.\par
7.Split a string using a regex.\par
8.Extract all numbers from a string using regex.\par
9.Validate a password with specific criteria using regex.\par
10.Write a regex to match dates in YYYY-MM-DD format.\par
\fs40 Performance Optimization\par
\fs28 1.Implement a debounce function to limit the rate of a function call.\par
2.Implement a throttle function to limit the rate of a function call.\par
3.Optimize a loop to reduce time complexity.\par
Use memoization to optimize a recursive function.\par
Implement lazy loading for images.\par
Use requestAnimationFrame for smooth animations.\par
Optimize DOM manipulation by minimizing reflows and repaints.\par
Use web workers for heavy computations.\par
Implement tree shaking to remove unused code.\par
Use code splitting to load parts of the application on demand.\par
\fs40 Design Patterns\par
\fs28 1.Implement the Singleton pattern.\par
2.Implement the Observer pattern.\par
3.Implement the Factory pattern.\par
4.Implement the Module pattern.\par
5.Implement the Revealing Module pattern.\par
6.Implement the Prototype pattern.\par
7.Implement the Decorator pattern.\par
8.Implement the Command pattern.\par
9.Implement the Strategy pattern.\par
10.Implement the Mediator pattern\fs40 .\par
Testing\par
\fs28 1.Write a simple test case using Jest.\par
2.Write a test case using Mocha and Chai.\par
\fs40 Test a\par
}
 